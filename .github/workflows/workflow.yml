# name: CI

# on:
#   push:
#     branches: [ develop ]
#   pull_request:
#     branches: [ develop ]

#   # Allows to run this workflow manually from the Actions tab
#   workflow_dispatch:

# jobs:

#   CI:
#     # Define the runner used in the workflow
#     runs-on: ubuntu-latest
#     steps:
#       # Check out repo so our workflow can access it
#       - uses: actions/checkout@v2

#       # Setup Python
#       - name: Set up Python
#         # This action sets up a Python environment for use in actions
#         uses: actions/setup-python@v2
#         with:
#           python-version: 3.9

#       # Install Python Virtual ENV
#       - name: Install Python Virtual ENV
#         run: pip3 install virtualenv

#       # Setup Virtual ENV
#       - name:  Virtual ENV
#         uses: actions/cache@v2
#         id: cache-venv # name for referring later
#         with:
#           path: venv # what we cache: the Virtual ENV
#           # The cache key depends on requirements.txt
#           key: ${{ runner.os }}-venv-${{ hashFiles('**/requirements*.txt') }}
#           restore-keys: |
#             ${{ runner.os }}-venv-

#       # Build a Virtual ENV, but only if it doesn't already exist
#       - name: Activate Virtual ENV
#         run: python -m venv venv && source venv/bin/activate && pip3 install -r requirements.txt
#         if: steps.cache-venv.outputs.cache-hit != 'true'

# #      - name: Run Tests
# #        # Note that you have to activate the virtualenv in every step
# #        # because GitHub actions doesn't preserve the environment
# #        run: . venv/bin/activate && pytest

#       - name: Create archive of dependencies
#         run: |
#           cd ./venv/lib/python3.9/site-packages
#           zip -r9 ../../../../api.zip .
#       - name: Add API files to Zip file
#         run: cd ./app && zip -g ../api.zip -r .

#       - name: Upload zip file artifact
#         uses: actions/upload-artifact@v2
#         with:
#           name: api
#           path: api.zip

#   CD:
#     runs-on: ubuntu-latest
#     needs: [CI]
#     if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
#     steps: 
#       - name: Install AWS CLI
#         uses: unfor19/install-aws-cli-action@v1
#         with: 
#           version: 1
#         env:
#           AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

#       - name: AWS config
#         run: aws configure list
#         env:
#           AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

#       - name: Download Lambda api.zip
#         uses: actions/download-artifact@v2
#         with:
#           name: api

#       - name: Upload to S3
#         run: aws s3 cp api.zip s3://${{ secrets.AWS_S3_BUSKET_NAME }}/
#         env:
#           AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

#       - name: Deploy new Lambda
#         run: aws lambda update-function-code --function-name ${{ secrets.AWS_LAMBDA_NAME }} --s3-bucket ${{ secrets.AWS_S3_BUSKET_NAME }} --s3-key api.zip
#         env:
#           AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
name: CI/CD Pipeline
on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]
  workflow_dispatch:

jobs:
  continuous-integration:
    runs-on: ubuntu-latest
    steps:
      # Step 1
      - uses: actions/checkout@v2
      # Step 2
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      # Step 3
      - name: Install dependencies
        run: pip install -r requirements.txt
      - name: some shit
        run: python --version
        
#       - name: Install uvicorn
#         run: pip install uvicorn
        
#       - name: Install fastapi
#         run: pip install fastapi
      # Step 4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
      # Step 5
#     - name: Build Application 
#        run:  python main.py

  continuous-deployment:
    runs-on: ubuntu-latest
    needs: [continuous-integration]
    if: github.ref == 'refs/heads/develop'
    steps:
     # Step 1
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2 
     # Step 2
      - name: Create CodeDeploy Deployment
        id: deploy
        run: |
          aws deploy create-deployment \
            --application-name test_fastapi \
            --deployment-group-name test_fastapi_group \
            --deployment-config-name CodeDeployDefault.OneAtATime \
            --github-location repository=${{ github.repository }},commitId=${{ github.sha }}
